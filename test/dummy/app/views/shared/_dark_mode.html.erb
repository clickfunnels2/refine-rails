<dark-mode-toggle
  id="dark-mode-toggle-5"
  class="slider"
  style="position: absolute; top: 0.75rem; right: 1rem; z-index: 1000;"
  mode="light"
  permanent="true"
  appearance="toggle"
></dark-mode-toggle>

<script>
  // const body = document.body;
  // const toggle = document.querySelector('dark-mode-toggle');
  //
  // // Set or remove the `dark` class the first time.
  // toggle.mode === 'dark'
  //     ? body.classList.add('dark')
  //     : body.classList.remove('dark');
  //
  // // Remember the user's preference.
  // toggle.setAttribute('permanent', '');
  //
  // toggle.addEventListener('colorschemechange', () => {
  //   body.classList.toggle('dark', toggle.mode === 'dark');
  // });

  (() => {
    if (window.matchMedia('(prefers-color-scheme)').media === 'not all') {
      // alert('Your browser does not support the `prefers-color-scheme` media query.');
    }

    const darkModeToggle = document.querySelector('dark-mode-toggle');
    const manifests = document.querySelectorAll('link[rel="manifest"]');
    const favicons = document.querySelectorAll('link[rel="icon"]');
    const themeColor = document.querySelector('meta[name="theme-color"]');

    const toggleTheme = (e) => {
      const darkModeOn = e.detail.colorScheme === 'dark' ? true : false;
      manifests.forEach((link) => {
        link.href = darkModeOn ? link.dataset.hrefDark : link.dataset.hrefLight;
      });
      favicons.forEach((link) => {
        link.href = darkModeOn ? link.dataset.hrefDark : link.dataset.hrefLight;
      });
      themeColor.content = darkModeOn ? 'black' : 'white';
    };
    document.addEventListener('colorschemechange', toggleTheme);
    // Remove this line ⤵️
    // toggleTheme({detail: {colorScheme: darkModeToggle.mode}});
  })();

  //
  //
  // ((doc) => {
  //
  //   const themeColor = doc.querySelector('meta[name="theme-color"]');
  //   const colorScheme = doc.querySelector('meta[name="color-scheme"]');
  //   const body = doc.body;
  //
  //   doc.addEventListener('colorschemechange', (e) => {
  //     // The event fires right before the color scheme goes into effect,
  //     // so we need the `color` value.
  //     themeColor.content = getComputedStyle(body).color;
  //     colorScheme.content = e.detail.colorScheme;
  //     console.log(
  //         `${e.target.id} changed the color scheme to ${e.detail.colorScheme}`,
  //     );
  //   });
  //
  //   doc.addEventListener('permanentcolorscheme', (e) => {
  //     const permanent = e.detail.permanent;
  //     console.log(
  //         `${permanent ? 'R' : 'Not r'}emembering the last selected mode.`,
  //     );
  //   });
  // })(document);
</script>